#include <windows.h>
#include "resource.h"

const char g_szClassName[] = "myWindowClass";

// Step 4: The Window Procedure
LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)
{
    switch (msg)
    {
    case WM_CLOSE:
        DestroyWindow(hwnd);
        break;
    case WM_DESTROY:
        PostQuitMessage(0);
        break;

    default:
        return DefWindowProc(hwnd, msg, wParam, lParam);
    }

    return 0;
}

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)
{
    WNDCLASSEX wc;
    HWND hwnd;
    MSG Msg;

    // Step 1: Registering the window class
    wc.cbClsExtra               = 0;
    wc.cbSize                   = sizeof(WNDCLASSEX);
    wc.cbWndExtra               = 0;
    wc.hbrBackground            = (HBRUSH) (COLOR_WINDOW + 1);
    wc.hCursor                  = LoadCursor(NULL, IDC_ARROW);
    wc.hIcon                    = LoadIcon(GetModuleHandle(NULL), MAKEINTRESOURCE(IDI_MYICON));
    wc.hIconSm                  = (HICON) LoadImage(GetModuleHandle(NULL), MAKEINTRESOURCE(IDI_MYICON), IMAGE_ICON, 16, 16, 0);
    wc.hInstance                = hInstance;
    wc.lpfnWndProc              = WndProc;
    wc.lpszClassName            = g_szClassName;
    wc.lpszMenuName             = MAKEINTRESOURCE(IDR_MYMENU);
    wc.style                    = 0;

    if (!RegisterClassEx(&wc)) {
        MessageBox(NULL, "Window Registration Failed!", "Error!", MB_OK | MB_ICONEXCLAMATION);

        return 0;
    }

    // Step 1: Creating the window
    hwnd = CreateWindowEx(
        WS_EX_CLIENTEDGE,
        g_szClassName,
        "Simple Window with Menu",
        WS_OVERLAPPEDWINDOW,
        CW_USEDEFAULT,
        CW_USEDEFAULT,
        400, 200,
        NULL, NULL, hInstance, NULL);

    if (hwnd == NULL) {
        MessageBox(NULL, "Window Creation Failed!", "Error!", MB_ICONEXCLAMATION | MB_OK);

        return 0;
    }

    ShowWindow(hwnd, ncm);
    UpdateWindow(hwnd);

    // Step 3: The Message Loop
    while (GetMessage(&Msg, hwnd, 0, 0) > 0) {
        TranslateMessage(&Msg);
        DispatchMessage(&Msg);
    }

    return Msg.wParam;
}
